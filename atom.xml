<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elendur</title>
  <subtitle>Alejandro Oviedo&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://elendur.com/"/>
  <updated>2018-07-31T16:03:21.376Z</updated>
  <id>http://elendur.com/</id>
  
  <author>
    <name>© 2016 Alejandro Oviedo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Using a headless Chrome to check social cards</title>
    <link href="http://elendur.com/2018/07/31/using-a-headless-chrome-to-check-social-cards-en/"/>
    <id>http://elendur.com/2018/07/31/using-a-headless-chrome-to-check-social-cards-en/</id>
    <published>2018-07-31T00:00:00.000Z</published>
    <updated>2018-07-31T16:03:21.376Z</updated>
    
    <content type="html">&lt;p&gt;At this time of the year it’s when we, at NodeConf Argentina, start to announce new speakers. There are a few checks we usually run for the website after the HTML changes have been made. Those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the changes don’t break anything&lt;/li&gt;
&lt;li&gt;Twitter social card looks fine&lt;/li&gt;
&lt;li&gt;Facebook social card looks fine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was growing tired of manually checking those last two for every change and thought “there must be a way to automate these checks, right?” Well turns out for Twitter I found a &lt;a href=&quot;https://cards-dev.twitter.com/validator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Card Validator&lt;/a&gt; website and Facebook’s have their &lt;a href=&quot;https://developers.facebook.com/tools/debug/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;URL Debugger&lt;/a&gt;. This is how I managed to use &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Puppeteer&lt;/a&gt; to browse Twitter’s Card Validator, take a screenshot, upload it to Imgur and paste it as comment on a pull request.&lt;/p&gt;
&lt;h2 id=&quot;First-things-first&quot;&gt;&lt;a href=&quot;#First-things-first&quot; class=&quot;headerlink&quot; title=&quot;First things first&quot;&gt;&lt;/a&gt;First things first&lt;/h2&gt;&lt;p&gt;I already had in place the configuration for TravisCI to run a build and deploy for every PR. If you want to know details on how I configured it you can read more on &lt;a href=&quot;https://elendur.com/2018/05/15/run-lighthouse-for-every-pr-en/&quot;&gt;Running Lighthouse for every PR with Travis CI&lt;/a&gt;. I was using Surge.sh to run deployments, but with Surge.sh’s subdomains a specific &lt;code&gt;robots.txt&lt;/code&gt; will be overwritten and it won’t work for the card validator.&lt;/p&gt;
&lt;p&gt;I switched to &lt;a href=&quot;https://zeit.co/now&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;now&lt;/a&gt;, using public deployments turned out to be very straightforward.&lt;/p&gt;
&lt;h2 id=&quot;Enter-the-puppeteer-world&quot;&gt;&lt;a href=&quot;#Enter-the-puppeteer-world&quot; class=&quot;headerlink&quot; title=&quot;Enter the puppeteer world&quot;&gt;&lt;/a&gt;Enter the puppeteer world&lt;/h2&gt;&lt;p&gt;I had Lighthouse running against the &lt;code&gt;now&lt;/code&gt; deployment and there were three things missing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get the list of modified files&lt;/li&gt;
&lt;li&gt;use puppetteer to make a screenshot&lt;/li&gt;
&lt;li&gt;upload the screenshot to a service&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first step I used a git command that, if a source branch is not specified, it will get the diff files from target branch to your current branch (the one for the pull request). This is the command:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git diff --name-status master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For Puppeteer to take the screenshot I needed to impersonate my Twitter session, followed by entering the URL I wanted to check and the last thing would be clicking the “Preview Card” button. To impersonate a Twitter session I leveraged the &lt;code&gt;page.setCookie&lt;/code&gt; method and passed the cookie through an environment variable. Next I emulated a viewport that would work well for me, then navigated to the Card Validator page &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; page.goto(&lt;span class=&quot;string&quot;&gt;&#39;https://cards-dev.twitter.com/validator&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    waitLoad: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;and used the output of step 1 with the deployment URL from now altogether (passed as argument)&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; page.click(textInputSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; page.keyboard.type(process.argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the screenshot to display correctly I needed to wait for an iframe on the page to load. But it’s far from &lt;em&gt;perfect&lt;/em&gt; because I couldn’t find a consistent solution without additionally waiting for an arbitrary amount of milliseconds. The whole file is under 70 lines of code, you can check it out &lt;a href=&quot;https://github.com/nodeconfar/2018-website/blob/4e05c4d28d28a4c26a3498ff28064677e481b5ec/tools/screenshot.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To complete step n° 3 I used &lt;a href=&quot;https://imgur.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Imgur&lt;/a&gt; and a handy bash &lt;a href=&quot;https://github.com/tremby/imgur.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;script&lt;/a&gt; I found. You can specify your client ID by adding the IMGUR_CLIENT_ID environment variable to your CI builds.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://i.imgur.com/wssX9JZ.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;figure&gt;&lt;img src=&quot;https://i.imgur.com/4Wq6WiP.png&quot; width=&quot;600&quot;&gt;&lt;figcaption style=&quot;text-align: center&quot;&gt;How the end result looks like on a pull request.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;Closing-thoughts&quot;&gt;&lt;a href=&quot;#Closing-thoughts&quot; class=&quot;headerlink&quot; title=&quot;Closing thoughts&quot;&gt;&lt;/a&gt;Closing thoughts&lt;/h2&gt;&lt;p&gt;It would be useful to have the social card check for Facebook too, but they upload images asynchronously making the crawling by Puppeteer more tedious.&lt;br&gt;At this point I will say that Puppeteer is a very powerful tool, but I also think there a few bits to be improved like the API for asynchronous events. Even after waiting for different events fired on a dynamically-inserted iframe, I had to add an arbitrary timer for the changes to be rendered.&lt;br&gt;And by the way, you shouldn’t really impersonate your Twitter session for anything serious. Just create a user for your automation.&lt;/p&gt;
&lt;p&gt;Have you used Puppeteer in your CI flow? Let me know in the comments!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;At this time of the year it’s when we, at NodeConf Argentina, start to announce new speakers. There are a few checks we usually run for t
    
    </summary>
    
    
      <category term="javascript" scheme="http://elendur.com/tags/javascript/"/>
    
      <category term="ci" scheme="http://elendur.com/tags/ci/"/>
    
      <category term="automation" scheme="http://elendur.com/tags/automation/"/>
    
      <category term="puppeteer" scheme="http://elendur.com/tags/puppeteer/"/>
    
      <category term="chrome" scheme="http://elendur.com/tags/chrome/"/>
    
      <category term="headless" scheme="http://elendur.com/tags/headless/"/>
    
  </entry>
  
  <entry>
    <title>Running Lighthouse for every PR with Travis CI</title>
    <link href="http://elendur.com/2018/05/15/run-lighthouse-for-every-pr-en/"/>
    <id>http://elendur.com/2018/05/15/run-lighthouse-for-every-pr-en/</id>
    <published>2018-05-15T00:00:00.000Z</published>
    <updated>2018-05-15T13:09:07.310Z</updated>
    
    <content type="html">&lt;p&gt;We announced the &lt;a href=&quot;https://nodeconf.com.ar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeConf Argentina 2018&lt;/a&gt;‘s website two weeks ago and while I was helping with a few things on readability and user experience I thought on trying &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LightHouse&lt;/a&gt; on it through the Chrome Dev tools.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://i.imgur.com/fhZsf8v.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.imgur.com/fhZsf8v.jpg&quot; alt=&quot;picture of Audits tab in Chrome Developer Tools&quot; width=&quot;600&quot;&gt;&lt;/a&gt;&lt;br&gt;Open the Developer Tools and select the Audits tab to run Lighthouse.&lt;/p&gt;

&lt;p&gt;At that moment accessibility was not that good (59/100) and I knew it was important to improve on it. It was then when I started thinking on ways to foster collaboration and quantifying or measuring improvements. Automation + GitHub might be an option; not only for the case on accessibility but it could also report improvements on performance, SEO and best practices.&lt;/p&gt;
&lt;h2 id=&quot;Triggering-a-build-on-Pull-Requests&quot;&gt;&lt;a href=&quot;#Triggering-a-build-on-Pull-Requests&quot; class=&quot;headerlink&quot; title=&quot;Triggering a build on Pull Requests&quot;&gt;&lt;/a&gt;Triggering a build on Pull Requests&lt;/h2&gt;&lt;p&gt;I wanted to trigger a build &lt;strong&gt;only&lt;/strong&gt; when branches or features are “completed”, that is usually the case when you open a PR. There is also a restriction in the tool for running Lighthouse from the shell that won’t run for branches builds on Travis CI. &lt;/p&gt;
&lt;p&gt;After a few minutes of trial and error with Travis’ configuration settings I managed to get the behaviour I was looking for. These ended up as the settings for the project:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://imgur.com/Skk5keW.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://imgur.com/Skk5keW.jpg&quot; alt=&quot;picture of Travis CI configuration&quot; width=&quot;600&quot;&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;And I added this to the &lt;code&gt;.travis.yml&lt;/code&gt; (you might want to change the branch to “master”):&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;branches:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  only:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; gh-pages&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;lighthouse-ci&quot;&gt;&lt;a href=&quot;#lighthouse-ci&quot; class=&quot;headerlink&quot; title=&quot;lighthouse-ci&quot;&gt;&lt;/a&gt;lighthouse-ci&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ebidel/lighthouse-ci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lighthouse-ci&lt;/a&gt; is a great package that lets you run Lighthouse from the shell and can report back results directly into GitHub. Their &lt;a href=&quot;https://github.com/ebidel/lighthouse-ci/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; is great! In summary: you will need to get an API key, configure that key in Travis CI, add the package as one of your dev dependencies and run &lt;code&gt;npm run lh https://yourcoolwebsite.com&lt;/code&gt; at last.&lt;/p&gt;
&lt;p&gt;After that npm script finishes you should see a comment on your PR:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://i.imgur.com/saubxSE.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.imgur.com/saubxSE.jpg&quot; alt=&quot;picture of lighthouse-ci&#39;s comment&quot; width=&quot;600&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve seen some inconsistencies on Lighthouse’s audits from Chrome and from the shell, like the performance varying, but I haven’t found anything that could cause it. Maybe I’ll post a follow up issue on the repo.&lt;/p&gt;
&lt;p&gt;If you want to know more details on how I configured Surge.sh to run on Travis you can read this &lt;a href=&quot;https://medium.com/onfido-tech/travis-surge-github-auto-deploy-every-pr-branch-and-tag-a6c8c790831f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;We announced the &lt;a href=&quot;https://nodeconf.com.ar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeConf Argentina 2018&lt;/a&gt;‘s website two weeks ago and
    
    </summary>
    
    
      <category term="ci" scheme="http://elendur.com/tags/ci/"/>
    
      <category term="travis" scheme="http://elendur.com/tags/travis/"/>
    
      <category term="lighthouse" scheme="http://elendur.com/tags/lighthouse/"/>
    
      <category term="accessibility" scheme="http://elendur.com/tags/accessibility/"/>
    
      <category term="performance" scheme="http://elendur.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Docker Swarm Architecture</title>
    <link href="http://elendur.com/2017/02/14/docker-swarm-architecture-en/"/>
    <id>http://elendur.com/2017/02/14/docker-swarm-architecture-en/</id>
    <published>2017-02-14T00:00:00.000Z</published>
    <updated>2017-02-14T17:27:06.238Z</updated>
    
    <content type="html">&lt;p&gt;I’m working on a Docker Swarm deployment to production and these are some of my thoughts on how things should be. In my case the deployment is on AWS but I’m deliberately skipping the AWS-specific parts on this blog post.&lt;/p&gt;
&lt;h2 id=&quot;Know-the-Basics&quot;&gt;&lt;a href=&quot;#Know-the-Basics&quot; class=&quot;headerlink&quot; title=&quot;Know the Basics&quot;&gt;&lt;/a&gt;Know the Basics&lt;/h2&gt;&lt;p&gt;A swarm will consist of &lt;strong&gt;&lt;em&gt;managers&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;nodes&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;services&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt; A &lt;strong&gt;node&lt;/strong&gt; is basically a worker of your swarm, it will only receive instructions. &lt;br&gt; A &lt;strong&gt;manager&lt;/strong&gt; is a node that can give instructions to your swarm (i.e. creating and removing services). Managers can also run instances of services.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;service&lt;/strong&gt; can have multiple replicas and Docker will distribute them evenly across your nodes - if you have 3 (active) nodes and a service with 3 replicas, each node will have a running instance of that service.&lt;/p&gt;
&lt;p&gt;For any service in the swarm, Docker will do a round-robin between the replicas (shameless plug, watch &lt;a href=&quot;https://www.youtube.com/watch?v=kpvbOzHUakA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Load balancing is impossible&lt;/a&gt;). Docker call this feature of distributing incoming connections from outside the swarm &lt;em&gt;ingress load balancing&lt;/em&gt;. Is important to say that if you access a service from within the swarm it will also go through the built-in load balancer.&lt;/p&gt;
&lt;p&gt;If you try to access a service on a node that’s not running it Docker will re-reoute the request to a node that has a running instance of that service.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://i.imgur.com/wssX9JZ.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.imgur.com/wssX9JZ.png&quot; width=&quot;600&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the component labeled LB is serving as a reverse proxy and it will have to be able to discover new nodes in your swarm dynamically.&lt;/p&gt;
&lt;h2 id=&quot;Networks&quot;&gt;&lt;a href=&quot;#Networks&quot; class=&quot;headerlink&quot; title=&quot;Networks&quot;&gt;&lt;/a&gt;Networks&lt;/h2&gt;&lt;p&gt;For my very basic setup I created an encrypted overlay network for - initially - all my services.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker network create --driver overlay --subnet 10.0.9.0/24 --opt encrypted my-network&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Of course you can create specific networks for groups of services but that will depend on your requirements and use cases.&lt;/p&gt;
&lt;h2 id=&quot;Communication-between-services&quot;&gt;&lt;a href=&quot;#Communication-between-services&quot; class=&quot;headerlink&quot; title=&quot;Communication between services&quot;&gt;&lt;/a&gt;Communication between services&lt;/h2&gt;&lt;p&gt;By default Docker Swarm configures DNS service discovery for you so you will be able to access from a service to another service in your swarm via its name, if they share the same network.&lt;/p&gt;
&lt;h2 id=&quot;Registry&quot;&gt;&lt;a href=&quot;#Registry&quot; class=&quot;headerlink&quot; title=&quot;Registry&quot;&gt;&lt;/a&gt;Registry&lt;/h2&gt;&lt;p&gt;In my case, I configured a private - HTTP only - registry to serve my Docker images (see &lt;a href=&quot;https://elendur.com/2017/01/31/configuring-a-local-docker-registry-en/&quot;&gt;Configuring a local Docker Registry&lt;/a&gt;). Since it wont be public and I only need it available in the virtual network of my instances I don’t see any reason why I should configure TLS on it.&lt;/p&gt;
&lt;h2 id=&quot;Autoscalling-groups&quot;&gt;&lt;a href=&quot;#Autoscalling-groups&quot; class=&quot;headerlink&quot; title=&quot;Autoscalling groups&quot;&gt;&lt;/a&gt;Autoscalling groups&lt;/h2&gt;&lt;p&gt;It’s very important to have redundancy of managers in your swarm because &lt;strong&gt;if you have only one manager and something goes wrong, you will lose the entire swarm&lt;/strong&gt;. That being said, it’s also important to have an odd number of managers due to the nature of the algorithm that Swarm uses to choose their leader (read more in &lt;a href=&quot;https://docs.docker.com/engine/swarm/admin_guide/#/distribute-manager-nodes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this section&lt;/a&gt;). You should also consistently &lt;a href=&quot;https://docs.docker.com/engine/swarm/admin_guide/#/back-up-the-swarm-state&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;backup the swarm state&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ideally you will count with two autoscalling groups, one for your managers and another one for your nodes.&lt;/p&gt;
&lt;p&gt;For small clusters I see no problem on letting the managers run service’s instances but in big clusters you should have only dedicated managers - see how to do it &lt;a href=&quot;https://docs.docker.com/engine/swarm/admin_guide/#/run-manager-only-nodes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;This blog post focus on architecture decisions but definitely the development and deployment pipelines are two other important parts that are missing. I may write something once I’m more familiar with them.&lt;/p&gt;
&lt;p&gt;If you have configured your swarm in a different way or I’m missing some neat features tell me in the comments!&lt;/p&gt;
&lt;h2 id=&quot;Other-resources&quot;&gt;&lt;a href=&quot;#Other-resources&quot; class=&quot;headerlink&quot; title=&quot;Other resources&quot;&gt;&lt;/a&gt;Other resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Swarm features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs-stage.docker.com/v1.10/swarm/swarm_at_scale/01-about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn application architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.scottlogic.com/2016/08/30/docker-1-12-swarm-mode-round-robin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 1.12 Swarm Mode - Round Robin inside and out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/swarm/raft/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raft consensus in swarm mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/mvaldesdeleon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Martin&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gonrial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ezequiel&lt;/a&gt; for reviewing this post and helping me to tune up the diagram.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I’m working on a Docker Swarm deployment to production and these are some of my thoughts on how things should be. In my case the deployme
    
    </summary>
    
    
      <category term="docker" scheme="http://elendur.com/tags/docker/"/>
    
      <category term="architecture" scheme="http://elendur.com/tags/architecture/"/>
    
      <category term="docker-swarm" scheme="http://elendur.com/tags/docker-swarm/"/>
    
      <category term="containers" scheme="http://elendur.com/tags/containers/"/>
    
  </entry>
  
  <entry>
    <title>Configuring a local Docker Registry over HTTP</title>
    <link href="http://elendur.com/2017/01/31/configuring-a-local-docker-registry-en/"/>
    <id>http://elendur.com/2017/01/31/configuring-a-local-docker-registry-en/</id>
    <published>2017-01-31T00:00:00.000Z</published>
    <updated>2017-01-31T19:24:46.808Z</updated>
    
    <content type="html">&lt;p&gt;I struggled for a few hours to get the right set up for a local &lt;a href=&quot;https://docs.docker.com/registry/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Registry&lt;/a&gt;. This blog post is what ended up working for me.&lt;/p&gt;
&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;I’m currently working on a project that’s planning to use &lt;a href=&quot;https://www.docker.com/products/docker-swarm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Swarm&lt;/a&gt; and for making the Docker images availables for all nodes it made a lot of sense setting up a private registry.&lt;br&gt;The recommended configuration is to set up your private registry with TLS but I could think of a lot of use cases where your registry is not exposed publicly and you want your instances to connect to it using good ‘ol HTTP.&lt;/p&gt;
&lt;h2 id=&quot;RTFM&quot;&gt;&lt;a href=&quot;#RTFM&quot; class=&quot;headerlink&quot; title=&quot;RTFM&quot;&gt;&lt;/a&gt;RTFM&lt;/h2&gt;&lt;p&gt;Docker offers a very simple way to fire up a local repository in the &lt;a href=&quot;https://hub.docker.com/_/registry/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hub’s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -p 5000:5000 --restart always --name registry registry:2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That’s literally the only command you have to run to get your registry running, which is great.&lt;br&gt;But everything comes with a catch, right? &lt;strong&gt;Doing this will allow you to pull, push and search images refering only to &lt;em&gt;localhost&lt;/em&gt; and if you want to access that registry from another host you will not be able to&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Docker Engine clients are hardwired to enforce TLS for the communication used with registries so you’ll have to add an &lt;em&gt;insecure registry&lt;/em&gt;. There’s even a &lt;a href=&quot;https://docs.docker.com/registry/insecure/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation page&lt;/a&gt; for how to set it up but it appears to not apply for those operating systems that are using systemd and lucky me, I was running Ubuntu 16.04 on my instances.&lt;/p&gt;
&lt;p&gt;After an extensive session of googling around I found an &lt;a href=&quot;https://github.com/docker/docker/issues/28321&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue&lt;/a&gt; from &lt;a href=&quot;https://github.com/ktamiola&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kamil Tamiola&lt;/a&gt;, aka the MVP of the story, with something that was actually working.&lt;/p&gt;
&lt;p&gt;Modifying the file under &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; with:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;insecure-registries&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;yourRegistryIP:5000&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;and restarting docker afterwards (&lt;code&gt;sudo service docker restart&lt;/code&gt;) worked like a charm.&lt;br&gt;You should be able to confirm that the insecure registry was added by running &lt;code&gt;docker info&lt;/code&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I struggled for a few hours to get the right set up for a local &lt;a href=&quot;https://docs.docker.com/registry/&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
      <category term="docker" scheme="http://elendur.com/tags/docker/"/>
    
      <category term="registry" scheme="http://elendur.com/tags/registry/"/>
    
  </entry>
  
  <entry>
    <title>Know Your Stack Traces</title>
    <link href="http://elendur.com/2016/10/06/know-your-stack-traces-en/"/>
    <id>http://elendur.com/2016/10/06/know-your-stack-traces-en/</id>
    <published>2016-10-06T00:00:00.000Z</published>
    <updated>2017-01-31T17:55:22.390Z</updated>
    
    <content type="html">&lt;p&gt;The last couple of months I’ve been working in an application with a microservices architecture. I had to debug message errors like “Something went wrong with your request” with scarce and non-descriptive stack traces.&lt;br&gt;While trying to find those errors I learned a few things.&lt;/p&gt;
&lt;h2 id=&quot;Stack-this-stack-that&quot;&gt;&lt;a href=&quot;#Stack-this-stack-that&quot; class=&quot;headerlink&quot; title=&quot;Stack this, stack that&quot;&gt;&lt;/a&gt;Stack this, stack that&lt;/h2&gt;&lt;p&gt;The stack is the part of memory that keeps track at all times the functions invoked until a specific moment in your program. &lt;strong&gt;Think of a stack trace as a set of entries with an order of precedence&lt;/strong&gt;, generally from top to bottom from most recent to older functions respectively.&lt;/p&gt;
&lt;p&gt;Let’s make some nested function calls with the help of recursion and &lt;code&gt;eval&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;().stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`(function fn&lt;span class=&quot;subst&quot;&gt;$&amp;#123;n&amp;#125;&lt;/span&gt;()&amp;#123; return fn(n-1)&amp;#125;)()`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fn(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Running the previous example in Chrome (and Node.js or any V8-based runtime) will show you something like the following:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at Error (native)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at fn (&amp;lt;anonymous&amp;gt;:2:24)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at fn1 (eval at fn (unknown source), &amp;lt;anonymous&amp;gt;:1:25)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at eval (eval at fn (unknown source), &amp;lt;anonymous&amp;gt;:1:34)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at fn (&amp;lt;anonymous&amp;gt;:3:12)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at fn2 (eval at fn (unknown source), &amp;lt;anonymous&amp;gt;:1:25)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at eval (eval at fn (unknown source), &amp;lt;anonymous&amp;gt;:1:34)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at fn (&amp;lt;anonymous&amp;gt;:3:12)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at fn3 (eval at fn (unknown source), &amp;lt;anonymous&amp;gt;:1:25)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at eval (eval at fn (unknown source), &amp;lt;anonymous&amp;gt;:1:34)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It’s being chopped up, Chrome defaults to a limit of 10 stack frames. To change the limit in Chrome, Node or Edge you can run &lt;code&gt;Error.stackTraceLimit = Infinity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Firefox, the limit is 128 stack frames (at least a power of 2, right?) and &lt;a href=&quot;https://dxr.mozilla.org/mozilla-central/rev/ea104eeb14cc54da9a06c3766da63f73117723a0/js/src/jsexn.cpp#238&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;it seems it’s being hardcoded&lt;/a&gt;. In Safari it’s not limited at all. &lt;/p&gt;
&lt;h2 id=&quot;Long-stack-traces&quot;&gt;&lt;a href=&quot;#Long-stack-traces&quot; class=&quot;headerlink&quot; title=&quot;Long stack traces&quot;&gt;&lt;/a&gt;Long stack traces&lt;/h2&gt;&lt;p&gt;Asynchronous stack traces, also called long stack traces, are something you will have to deal with if you write JavaScript. First, if you haven’t seen Philip Roberts’s talk &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“What the Heck is the Event Loop anyway”&lt;/a&gt; go and watch it now, I’ll wait.&lt;/p&gt;
&lt;p&gt;Done? Ok, let’s continue.&lt;/p&gt;
&lt;p&gt;By the nature of how things are brought up in the event loop, any async operation (timers or I/O) will have a &lt;em&gt;local&lt;/em&gt; stack trace. See &lt;a href=&quot;https://nodejs.org/api/errors.html#errors_new_error_message&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js documentation on errors&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stack traces extend only to either (a) the beginning of synchronous code execution, or (b) the number of frames given by the property Error.stackTraceLimit, whichever is smaller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When debugging it’s common to want as much granularity as you can get to be able to identify the path to the line of code that has the error. No matter if it went through async operations to get executed. &lt;/p&gt;
&lt;p&gt;That’s when long stack traces comes in: they are an extension of stack traces in an attempt of tracing the original source of async operations.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/longjohn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Longjohn&lt;/a&gt; is a useful npm package that will trace every asynchronous operation and will provide you with a complete stack trace (internally it monkeypatches every async operation with their own wrapper to do so).&lt;/p&gt;
&lt;p&gt;Here’s how you can get long stack traces with Longjohn and Bluebird (just happens to be the one I use, could be any promises implementation):&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;longjohn&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;bluebird&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(() =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;().stack));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;example();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Be aware that using long stack traces will have some performance overhead.&lt;/p&gt;
&lt;p&gt;Note for Bluebird users: the &lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.longstacktraces.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;long stack traces feature&lt;/a&gt; will work only when throwing. Example:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;bluebird&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.longStackTraces();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;().stack); &lt;span class=&quot;comment&quot;&gt;// no appereance of the function name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;example();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Which is not good for tracing tools that use the state of the stack but do not throw.&lt;/p&gt;
&lt;h2 id=&quot;What’s-next&quot;&gt;&lt;a href=&quot;#What’s-next&quot; class=&quot;headerlink&quot; title=&quot;What’s next?&quot;&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;&lt;p&gt;It’s a (not well-known)problem the fact that we can’t get native promises (Node v4 or later) with asynchronous stack traces working. If you get an &lt;code&gt;unhandledRejection&lt;/code&gt; error in your application and you’re using native promises, &lt;strong&gt;the only workaround to get an async stack trace is switching to another Promises implementation and use a package like &lt;a href=&quot;https://www.npmjs.com/package/longjohn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;longjohn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And for now, it’s not clear how the problem of asynchronous stack traces with native promises it’s going to be solved, either for Node.js or in browsers. &lt;a href=&quot;https://github.com/nodejs/node-eps/pull/18&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AsyncHooks&lt;/a&gt; sounds like a plausible solution for Node. I only know that I’ll be avoiding using native promises for some time.&lt;/p&gt;
&lt;p&gt;Are you using other tools? Have you encountered other problems? Let me know in the comments.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The last couple of months I’ve been working in an application with a microservices architecture. I had to debug message errors like “Some
    
    </summary>
    
    
      <category term="stack traces" scheme="http://elendur.com/tags/stack-traces/"/>
    
      <category term="node.js" scheme="http://elendur.com/tags/node-js/"/>
    
      <category term="javascript" scheme="http://elendur.com/tags/javascript/"/>
    
      <category term="tracing" scheme="http://elendur.com/tags/tracing/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Hexo</title>
    <link href="http://elendur.com/2016/06/28/setting-up-hexo-en/"/>
    <id>http://elendur.com/2016/06/28/setting-up-hexo-en/</id>
    <published>2016-06-28T00:00:00.000Z</published>
    <updated>2016-06-28T12:21:45.892Z</updated>
    
    <content type="html">&lt;p&gt;I’ve been writing some things that could fit into a blog post(&lt;a href=&quot;https://github.com/a0viedo/node-tooling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-tooling&lt;/a&gt; or some of the resources of &lt;a href=&quot;https://github.com/a0viedo/fullstack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullstack&lt;/a&gt;) but I never dedicated time and effort to set up one. This is the story on how I modified a blog framework to suit my needs.&lt;/p&gt;
&lt;h2 id=&quot;Narrowing-down-the-contenders&quot;&gt;&lt;a href=&quot;#Narrowing-down-the-contenders&quot; class=&quot;headerlink&quot; title=&quot;Narrowing down the contenders&quot;&gt;&lt;/a&gt;Narrowing down the contenders&lt;/h2&gt;&lt;p&gt;For a few weeks now I’ve been working on a side project with lots of data visualizations and thought it would be a good idea not only to write about it but also include some interactions in the blog post itself. I wanted the flexibility to modify the HTML and JavaScript (more like inserting chunks of HTML and JavaScript in this case) as I see fit.&lt;br&gt;These requirements ended up ruling out &lt;a href=&quot;https://wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wordpress&lt;/a&gt;, &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://ghost.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ghost&lt;/a&gt; and &lt;a href=&quot;http://medium.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Medium&lt;/a&gt; as viable options. It’s not that Wordpress would restrict you to modify its source but PHP nor their huge codebase are things I’m familiar with. This is were &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; comes in and, if necessary, I would find easier to look at JavaScript code.&lt;/p&gt;
&lt;p&gt;Another very important feature for me was the ability to publish posts in both English and Spanish.&lt;/p&gt;
&lt;h2 id=&quot;Always-go-back-to-the-source&quot;&gt;&lt;a href=&quot;#Always-go-back-to-the-source&quot; class=&quot;headerlink&quot; title=&quot;Always go back to the source&quot;&gt;&lt;/a&gt;Always go back to the source&lt;/h2&gt;&lt;p&gt;After installing and creating a new blog with &lt;a href=&quot;https://www.npmjs.com/package/hexo-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-cli&lt;/a&gt; you’ll end up with a directory structure like the following:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _config.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── db.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── node_modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── public&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── scaffolds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── themes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;“source” is the directory where you’ll save your pages (“About”, “Tags”, etc) and blog posts.&lt;/p&gt;
&lt;p&gt;I created two new blog posts (you can create one by executing &lt;code&gt;hexo new post yourPostTitle&lt;/code&gt;) with the same identifier (see &lt;a href=&quot;https://hexo.io/docs/front-matter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Front-matter&lt;/a&gt;) to know that, although they are in different languages, they represent the same post. That, of course, would mean for Hexo to display two different posts in your “Home” or “Archives” pages.&lt;/p&gt;
&lt;p&gt;My first attempt in solving the duplicates issue was modifying the template’s logic. After playing around with &lt;del&gt;Jade&lt;/del&gt; Pug and solving the problem partially I realized it would not integrate well with other components like pagination and more importantly it would be a theme-based solution, if for some reason I decide to switch to other theme I would have to solve the problem once again.&lt;/p&gt;
&lt;p&gt;Hexo has a collection (stored in a json file generated from your “source/_posts” directory) for posts and that collection is injected to all the front-end sections like “Home”, “Archive”, “About”, etc. Adding a query parameter to the query that returns all the posts wouldn’t solve the problem since it will erase all generated files from the translated posts.&lt;/p&gt;
&lt;p&gt;I had to follow what exactly &lt;code&gt;hexo generate&lt;/code&gt; was doing to get more insight on how to do it: there’s a folder containing a file for each component it will generate (“assets”, “page” and “post”). Looking inside the &lt;a href=&quot;https://github.com/hexojs/hexo/blob/master/lib/plugins/generator/post.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“post.js”&lt;/a&gt; file you’ll found that it’s iterating over the posts collection and setting up the content that it’s not specific to the post itself, like the &lt;code&gt;post.prev&lt;/code&gt; and &lt;code&gt;post.next&lt;/code&gt; references. Since it doesn’t interacts directly with the rest of the components it could be a good place to add the changes that I want.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; translatedPosts = locals.translatedPosts.toArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; translatedResults = translatedPosts.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;translatedPost&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; originalPost = results.find(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;r&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r.data.postId === translatedPost.postId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  translatedPost.prev = originalPost.data.prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  translatedPost.next = originalPost.data.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: translatedPost.path,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layout: [&lt;span class=&quot;string&quot;&gt;&#39;post&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;page&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: translatedPost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The previous code will iterate over a list of translated posts and mock the &lt;code&gt;post.prev&lt;/code&gt; and &lt;code&gt;post.next&lt;/code&gt; references to be the same ones that the original post had.&lt;/p&gt;
&lt;p&gt;Now all we need to do is set the &lt;code&gt;translatedPosts&lt;/code&gt; variable with our collection of translated posts:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;locals.set(&lt;span class=&quot;string&quot;&gt;&#39;translatedPosts&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!self.config.future) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    query.date = &amp;#123;$lte: &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now()&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!self._showDrafts()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    query.published = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  query.translated = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; db.model(&lt;span class=&quot;string&quot;&gt;&#39;Post&#39;&lt;/span&gt;).find(query);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I added the previous code after the set up of the &lt;code&gt;posts&lt;/code&gt; reference in &lt;a href=&quot;https://github.com/a0viedo/hexo/blob/master/lib/hexo/index.js#L122&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;line 122 of index.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve also modified the template for posts to show links to other translations if present, but that will remain to be theme-specific.&lt;/p&gt;
&lt;h2 id=&quot;Conclusions&quot;&gt;&lt;a href=&quot;#Conclusions&quot; class=&quot;headerlink&quot; title=&quot;Conclusions&quot;&gt;&lt;/a&gt;Conclusions&lt;/h2&gt;&lt;p&gt;I found that Hexo is flexible in a lot of ways and that the code is both readable and structured.&lt;/p&gt;
&lt;p&gt;You can view all the changes mentioned here at my &lt;a href=&quot;https://github.com/a0viedo/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fork of Hexo&lt;/a&gt;.  If you have questions or suggestions on other ways to do these changes please write to me on the comments.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been writing some things that could fit into a blog post(&lt;a href=&quot;https://github.com/a0viedo/node-tooling&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
    
      <category term="blog" scheme="http://elendur.com/tags/blog/"/>
    
      <category term="static sites" scheme="http://elendur.com/tags/static-sites/"/>
    
      <category term="hexo.io" scheme="http://elendur.com/tags/hexo-io/"/>
    
  </entry>
  
</feed>
