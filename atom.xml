<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elendur</title>
  <subtitle>Alejandro Oviedo&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://elendur.com/"/>
  <updated>2016-10-06T14:18:22.084Z</updated>
  <id>http://elendur.com/</id>
  
  <author>
    <name>© 2016 Alejandro Oviedo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Know Your Stack Traces</title>
    <link href="http://elendur.com/2016/10/06/know-your-stack-traces-en/"/>
    <id>http://elendur.com/2016/10/06/know-your-stack-traces-en/</id>
    <published>2016-10-06T14:18:22.084Z</published>
    <updated>2016-10-06T14:18:22.084Z</updated>
    
    <content type="html">&lt;p&gt;The last couple of months I’ve been working in an application with a microservices architecture. I had to debug message errors like “Something went wrong with your request” with scarce and non-descriptive stack traces.&lt;br&gt;While trying to find those errors I learned a few things.&lt;/p&gt;
&lt;h2 id=&quot;Stack-this-stack-that&quot;&gt;&lt;a href=&quot;#Stack-this-stack-that&quot; class=&quot;headerlink&quot; title=&quot;Stack this, stack that&quot;&gt;&lt;/a&gt;Stack this, stack that&lt;/h2&gt;&lt;p&gt;The stack is the part of memory that keeps track at all times the functions invoked until a specific moment in your program. &lt;strong&gt;Think of a stack trace as a set of entries with an order of precedence&lt;/strong&gt;, generally from top to bottom from most recent to older functions respectively.&lt;/p&gt;
&lt;p&gt;Let’s make some nested function calls with the help of recursion and &lt;code&gt;eval&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;().stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`(function fn&lt;span class=&quot;subst&quot;&gt;$&amp;#123;n&amp;#125;&lt;/span&gt;()&amp;#123; return fm(n-1)&amp;#125;)()`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fn(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Running the previous example in Chrome (and Node.js or any V8-based runtime) will show you something like the following:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at Error (native)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at h (&amp;lt;anonymous&amp;gt;:2:24)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at h1 (eval at h (unknown source), &amp;lt;anonymous&amp;gt;:1:24)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at eval (eval at h (unknown source), &amp;lt;anonymous&amp;gt;:1:32)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at h (&amp;lt;anonymous&amp;gt;:3:12)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at h2 (eval at h (unknown source), &amp;lt;anonymous&amp;gt;:1:24)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at eval (eval at h (unknown source), &amp;lt;anonymous&amp;gt;:1:32)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at h (&amp;lt;anonymous&amp;gt;:3:12)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at h3 (eval at h (unknown source), &amp;lt;anonymous&amp;gt;:1:24)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at eval (eval at h (unknown source), &amp;lt;anonymous&amp;gt;:1:32)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It’s being chopped up, Chrome defaults to a limit of 10 stack frames. To change the limit in Chrome, Node or Edge you can run &lt;code&gt;Error.stackTraceLimit = Infinity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Firefox, the limit is 128 stack frames (at least a power of 2, right?) and &lt;a href=&quot;https://dxr.mozilla.org/mozilla-central/rev/ea104eeb14cc54da9a06c3766da63f73117723a0/js/src/jsexn.cpp#238&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;it seems it’s being hardcoded&lt;/a&gt;. In Safari it’s not limited at all. &lt;/p&gt;
&lt;h2 id=&quot;Long-stack-traces&quot;&gt;&lt;a href=&quot;#Long-stack-traces&quot; class=&quot;headerlink&quot; title=&quot;Long stack traces&quot;&gt;&lt;/a&gt;Long stack traces&lt;/h2&gt;&lt;p&gt;Asynchronous stack traces, also called long stack traces, are something you will have to deal with if you write JavaScript. First, if you haven’t seen Philip Roberts’s talk &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“What the Heck is the Event Loop anyway”&lt;/a&gt; go and watch it now, I’ll wait.&lt;/p&gt;
&lt;p&gt;Done? Ok, let’s continue.&lt;/p&gt;
&lt;p&gt;By the nature of how things are brought up in the event loop, any async operation (timers or I/O) will have a &lt;em&gt;local&lt;/em&gt; stack trace. See &lt;a href=&quot;https://nodejs.org/api/errors.html#errors_new_error_message&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js documentation on errors&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stack traces extend only to either (a) the beginning of synchronous code execution, or (b) the number of frames given by the property Error.stackTraceLimit, whichever is smaller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When debugging it’s common to want as much granularity as you can get to be able to identify the path to the line of code that has the error. No matter if it went through async operations to get executed. &lt;/p&gt;
&lt;p&gt;That’s when long stack traces comes in: they are an extension of stack traces in an attempt of tracing the original source of async operations.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/longjohn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Longjohn&lt;/a&gt; is a useful npm package that will trace every asynchronous operation and will provide you with a complete stack trace (internally it monkeypatches every async operation with their own wrapper to do so).&lt;/p&gt;
&lt;p&gt;Here’s how you can get long stack traces with Longjohn and Bluebird (just happens to be the one I use, could be any promises implementation):&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;longjohn&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;bluebird&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(() =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;().stack));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;example();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Be aware that using long stack traces will have some performance overhead.&lt;/p&gt;
&lt;p&gt;Note for Bluebird users: the &lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.longstacktraces.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;long stack traces feature&lt;/a&gt; will work only when throwing. Example:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;bluebird&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.longStackTraces();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;().stack); &lt;span class=&quot;comment&quot;&gt;// no appereance of the function name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;example();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Which is not good for tracing tools that use the state of the stack but do not throw.&lt;/p&gt;
&lt;h2 id=&quot;What’s-next&quot;&gt;&lt;a href=&quot;#What’s-next&quot; class=&quot;headerlink&quot; title=&quot;What’s next?&quot;&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;&lt;p&gt;It’s a (not well-known)problem the fact that we can’t get native promises (Node v4 or later) with asynchronous stack traces working. If you get an &lt;code&gt;unhandledRejection&lt;/code&gt; error in your application and you’re using native promises, &lt;strong&gt;the only workaround to get an async stack trace is switching to another Promises implementation and use a package like &lt;a href=&quot;https://www.npmjs.com/package/longjohn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;longjohn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And for now, it’s not clear how the problem of asynchronous stack traces with native promises it’s going to be solved, either for Node.js or in browsers. &lt;a href=&quot;https://github.com/nodejs/node-eps/pull/18&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AsyncHooks&lt;/a&gt; sounds like a plausible solution for Node. I only know that I’ll be avoiding using native promises for some time.&lt;/p&gt;
&lt;p&gt;Are you using other tools? Have you encountered other problems? Let me know in the comments.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The last couple of months I’ve been working in an application with a microservices architecture. I had to debug message errors like “Some
    
    </summary>
    
    
      <category term="stack traces" scheme="http://elendur.com/tags/stack-traces/"/>
    
      <category term="node.js" scheme="http://elendur.com/tags/node-js/"/>
    
      <category term="javascript" scheme="http://elendur.com/tags/javascript/"/>
    
      <category term="tracing" scheme="http://elendur.com/tags/tracing/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Hexo</title>
    <link href="http://elendur.com/2016/06/28/setting-up-hexo-en/"/>
    <id>http://elendur.com/2016/06/28/setting-up-hexo-en/</id>
    <published>2016-06-28T00:00:00.000Z</published>
    <updated>2016-06-28T12:21:45.892Z</updated>
    
    <content type="html">&lt;p&gt;I’ve been writing some things that could fit into a blog post(&lt;a href=&quot;https://github.com/a0viedo/node-tooling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-tooling&lt;/a&gt; or some of the resources of &lt;a href=&quot;https://github.com/a0viedo/fullstack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullstack&lt;/a&gt;) but I never dedicated time and effort to set up one. This is the story on how I modified a blog framework to suit my needs.&lt;/p&gt;
&lt;h2 id=&quot;Narrowing-down-the-contenders&quot;&gt;&lt;a href=&quot;#Narrowing-down-the-contenders&quot; class=&quot;headerlink&quot; title=&quot;Narrowing down the contenders&quot;&gt;&lt;/a&gt;Narrowing down the contenders&lt;/h2&gt;&lt;p&gt;For a few weeks now I’ve been working on a side project with lots of data visualizations and thought it would be a good idea not only to write about it but also include some interactions in the blog post itself. I wanted the flexibility to modify the HTML and JavaScript (more like inserting chunks of HTML and JavaScript in this case) as I see fit.&lt;br&gt;These requirements ended up ruling out &lt;a href=&quot;https://wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wordpress&lt;/a&gt;, &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://ghost.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ghost&lt;/a&gt; and &lt;a href=&quot;http://medium.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Medium&lt;/a&gt; as viable options. It’s not that Wordpress would restrict you to modify its source but PHP nor their huge codebase are things I’m familiar with. This is were &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; comes in and, if necessary, I would find easier to look at JavaScript code.&lt;/p&gt;
&lt;p&gt;Another very important feature for me was the ability to publish posts in both English and Spanish.&lt;/p&gt;
&lt;h2 id=&quot;Always-go-back-to-the-source&quot;&gt;&lt;a href=&quot;#Always-go-back-to-the-source&quot; class=&quot;headerlink&quot; title=&quot;Always go back to the source&quot;&gt;&lt;/a&gt;Always go back to the source&lt;/h2&gt;&lt;p&gt;After installing and creating a new blog with &lt;a href=&quot;https://www.npmjs.com/package/hexo-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-cli&lt;/a&gt; you’ll end up with a directory structure like the following:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _config.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── db.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── node_modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── public&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── scaffolds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── themes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;“source” is the directory where you’ll save your pages (“About”, “Tags”, etc) and blog posts.&lt;/p&gt;
&lt;p&gt;I created two new blog posts (you can create one by executing &lt;code&gt;hexo new post yourPostTitle&lt;/code&gt;) with the same identifier (see &lt;a href=&quot;https://hexo.io/docs/front-matter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Front-matter&lt;/a&gt;) to know that, although they are in different languages, they represent the same post. That, of course, would mean for Hexo to display two different posts in your “Home” or “Archives” pages.&lt;/p&gt;
&lt;p&gt;My first attempt in solving the duplicates issue was modifying the template’s logic. After playing around with &lt;del&gt;Jade&lt;/del&gt; Pug and solving the problem partially I realized it would not integrate well with other components like pagination and more importantly it would be a theme-based solution, if for some reason I decide to switch to other theme I would have to solve the problem once again.&lt;/p&gt;
&lt;p&gt;Hexo has a collection (stored in a json file generated from your “source/_posts” directory) for posts and that collection is injected to all the front-end sections like “Home”, “Archive”, “About”, etc. Adding a query parameter to the query that returns all the posts wouldn’t solve the problem since it will erase all generated files from the translated posts.&lt;/p&gt;
&lt;p&gt;I had to follow what exactly &lt;code&gt;hexo generate&lt;/code&gt; was doing to get more insight on how to do it: there’s a folder containing a file for each component it will generate (“assets”, “page” and “post”). Looking inside the &lt;a href=&quot;https://github.com/hexojs/hexo/blob/master/lib/plugins/generator/post.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“post.js”&lt;/a&gt; file you’ll found that it’s iterating over the posts collection and setting up the content that it’s not specific to the post itself, like the &lt;code&gt;post.prev&lt;/code&gt; and &lt;code&gt;post.next&lt;/code&gt; references. Since it doesn’t interacts directly with the rest of the components it could be a good place to add the changes that I want.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; translatedPosts = locals.translatedPosts.toArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; translatedResults = translatedPosts.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;translatedPost&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; originalPost = results.find(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;r&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r.data.postId === translatedPost.postId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  translatedPost.prev = originalPost.data.prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  translatedPost.next = originalPost.data.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: translatedPost.path,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layout: [&lt;span class=&quot;string&quot;&gt;&#39;post&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;page&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: translatedPost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The previous code will iterate over a list of translated posts and mock the &lt;code&gt;post.prev&lt;/code&gt; and &lt;code&gt;post.next&lt;/code&gt; references to be the same ones that the original post had.&lt;/p&gt;
&lt;p&gt;Now all we need to do is set the &lt;code&gt;translatedPosts&lt;/code&gt; variable with our collection of translated posts:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;locals.set(&lt;span class=&quot;string&quot;&gt;&#39;translatedPosts&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!self.config.future) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    query.date = &amp;#123;$lte: &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now()&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!self._showDrafts()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    query.published = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  query.translated = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; db.model(&lt;span class=&quot;string&quot;&gt;&#39;Post&#39;&lt;/span&gt;).find(query);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I added the previous code after the set up of the &lt;code&gt;posts&lt;/code&gt; reference in &lt;a href=&quot;https://github.com/a0viedo/hexo/blob/master/lib/hexo/index.js#L122&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;line 122 of index.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve also modified the template for posts to show links to other translations if present, but that will remain to be theme-specific.&lt;/p&gt;
&lt;h2 id=&quot;Conclusions&quot;&gt;&lt;a href=&quot;#Conclusions&quot; class=&quot;headerlink&quot; title=&quot;Conclusions&quot;&gt;&lt;/a&gt;Conclusions&lt;/h2&gt;&lt;p&gt;I found that Hexo is flexible in a lot of ways and that the code is both readable and structured.&lt;/p&gt;
&lt;p&gt;You can view all the changes mentioned here at my &lt;a href=&quot;https://github.com/a0viedo/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fork of Hexo&lt;/a&gt;.  If you have questions or suggestions on other ways to do these changes please write to me on the comments.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been writing some things that could fit into a blog post(&lt;a href=&quot;https://github.com/a0viedo/node-tooling&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
    
      <category term="blog" scheme="http://elendur.com/tags/blog/"/>
    
      <category term="static sites" scheme="http://elendur.com/tags/static-sites/"/>
    
      <category term="hexo.io" scheme="http://elendur.com/tags/hexo-io/"/>
    
  </entry>
  
</feed>
